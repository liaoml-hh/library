<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.avantport.cat.service.lib.mapper.LibFileInfoMapper">
  <resultMap id="BaseResultMap" type="com.avantport.cat.service.lib.domain.LibFileInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="file_size" jdbcType="BIGINT" property="fileSize" />
    <result column="file_style" jdbcType="INTEGER" property="fileStyle" />
    <result column="file_ext" jdbcType="VARCHAR" property="fileExt" />
    <result column="file_user_id" jdbcType="BIGINT" property="fileUserId" />
    <result column="file_uuid" jdbcType="VARCHAR" property="fileUuid" />
    <result column="file_path" jdbcType="VARCHAR" property="filePath" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="file_class_id" jdbcType="BIGINT" property="fileClassId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="del_flag" jdbcType="INTEGER" property="delFlag" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.avantport.cat.service.lib.domain.LibFileInfo">
    <result column="file_brief" jdbcType="LONGVARCHAR" property="fileBrief" />
  </resultMap>
  <sql id="Base_Column_List">
    id, file_name, file_size, file_style, file_ext, file_user_id, file_uuid, file_path, 
    state, file_class_id, create_time, update_time, del_flag, create_by, update_by, remark
  </sql>
  <sql id="Blob_Column_List">
    file_brief
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from lib_file_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
    update  lib_file_info set del_flag = 1
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="com.avantport.cat.service.lib.domain.LibFileInfo">
    insert into lib_file_info ( file_name, file_size,
      file_style, file_ext, file_user_id, 
      file_uuid, file_path, state, 
      file_class_id, create_time, update_time, 
      del_flag, create_by, update_by, 
      remark, file_brief)
    values ( #{fileName,jdbcType=VARCHAR}, #{fileSize,jdbcType=BIGINT},
      #{fileStyle,jdbcType=INTEGER}, #{fileExt,jdbcType=VARCHAR}, #{fileUserId,jdbcType=BIGINT}, 
      #{fileUuid,jdbcType=VARCHAR}, #{filePath,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, 
      #{fileClassId,jdbcType=BIGINT}, CURRENT_TIMESTAMP, #{updateTime,jdbcType=TIMESTAMP},
      0, #{createBy,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR},
      #{remark,jdbcType=VARCHAR}, #{fileBrief,jdbcType=LONGVARCHAR})
  </insert>

  <update id="updateByPrimaryKey"  parameterType="com.avantport.cat.service.lib.domain.LibFileInfo">
    update lib_file_info
    set file_name = #{fileName,jdbcType=VARCHAR},
      file_size = #{fileSize,jdbcType=BIGINT},
      file_style = #{fileStyle,jdbcType=INTEGER},
      file_ext = #{fileExt,jdbcType=VARCHAR},
      file_user_id = #{fileUserId,jdbcType=BIGINT},
      file_uuid = #{fileUuid,jdbcType=VARCHAR},
      file_path = #{filePath,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      file_class_id = #{fileClassId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      del_flag = #{delFlag,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
        file_brief = #{fileBrief,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>


  <select id="selectFileInfoList" parameterType="com.avantport.cat.service.lib.domain.LibFileInfo"   resultMap="ResultMapWithBLOBs">
    select
    f.id, f.file_name, f.file_size, f.file_style, f.file_ext, f.file_user_id, f.file_uuid, file_path,
    f.state, f.file_class_id, f.create_time, f.update_time, f.del_flag, f.create_by, f.update_by, f.remark,f.file_brief
    from lib_file_info f left join lib_classification classification on (f.file_class_id = classification.id)
    where  f.del_flag = 0
    <if test="fileName != null and fileName != ''">
      AND f.file_name = #{fileName}
    </if>
    <if test="fileClassId != null and fileClassId != 0">
      AND f.file_class_id = #{fileClassId} OR f.file_class_id IN
      ( SELECT t.id FROM lib_classification t WHERE t.parent_path like concat('%', #{fileClassId}, '%'))
    </if>
        <if test="keywordIds != null and keywordIds.length >0 ">
          and f.id in ( SELECT DISTINCT(info.file_id) FROM lib_relation_info info WHERE info.keyword_id in
          <foreach item="item" index="index" collection="keywordIds" open="("
                   separator="," close=")">
            #{item}
          </foreach>
          )
        </if>
  </select>
  <insert id="insertFilesInfo" >
  insert into lib_file_info ( file_name, file_size,
   file_ext,
  file_uuid,
   create_time,
  del_flag, create_by)
   values
    <foreach collection="list" item="file" index="index" separator=",">
      (
       #{file.fileName,jdbcType=VARCHAR},
      #{file.fileSize,jdbcType=BIGINT},
      #{file.fileExt,jdbcType=VARCHAR},
      #{file.fileUuid,jdbcType=VARCHAR},
       CURRENT_TIMESTAMP,
      0,
     #{file.createBy,jdbcType=VARCHAR}      )
    </foreach>
  </insert>

  <select id="checkFileInfoUnique"  resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List"/>
    from lib_file_info
    where file_name=#{fileName} limit 1
  </select>



</mapper>