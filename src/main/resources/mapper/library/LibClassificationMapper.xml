<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.avantport.cat.service.lib.mapper.LibClassificationMapper">
  <resultMap id="BaseResultMap" type="com.avantport.cat.service.lib.domain.LibClassification">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="parent_path" jdbcType="VARCHAR" property="parentPath" />
    <result column="del_flag" jdbcType="INTEGER" property="delFlag" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.avantport.cat.service.lib.domain.LibClassification">
    <result column="brief" jdbcType="LONGVARCHAR" property="brief" />
  </resultMap>
  <sql id="Base_Column_List">
    id, class_name, parent_id, parent_path,del_flag,create_by,create_time,update_by,update_time,remark,brief
  </sql>
  <sql id="Blob_Column_List">
    brief
  </sql>

  <select id="selectClassificationList" parameterType="com.avantport.cat.service.lib.domain.LibClassification"   resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from lib_classification
    where  del_flag = 0
    <if test="parentId != null and parentId != 0">
      AND parent_id = #{parentId}
    </if>
    <if test="parentPath != null and parentPath != ''">
      AND parent_path like concat('%', #{parentPath}, '%')
    </if>
    <if test="className != null and className != ''">
      AND class_name = #{className}
    </if>
  </select>

  <select id="checkClassNameUnique"  resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List"/>
    from lib_classification
    where class_name=#{className}  and parent_id = #{parentId} limit 1
  </select>

  <select id="hasChildById" parameterType="Long" resultType="int">
        select count(1) from lib_classification
        where parent_id = #{id}
  </select>

  <select id="checkClassificationExistFiles" parameterType="Long" resultType="int">
        select count(1) from lib_file_info where file_class_id = #{id}
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from lib_classification
    where id = #{id,jdbcType=BIGINT}
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
    update lib_classification set del_flag = 1
    where id = #{id,jdbcType=BIGINT}
  </update>

  <insert id="insert" parameterType="com.avantport.cat.service.lib.domain.LibClassification"
          keyProperty="id" useGeneratedKeys="true">
    insert into lib_classification (class_name, parent_id,
      parent_path, del_flag, create_by, 
      create_time, update_by, update_time, 
      remark, brief)
    values (#{className,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT},
      #{parentPath,jdbcType=VARCHAR}, 0, #{createBy,jdbcType=VARCHAR},
      CURRENT_TIMESTAMP, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
      #{remark,jdbcType=VARCHAR}, #{brief,jdbcType=LONGVARCHAR})
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.avantport.cat.service.lib.domain.LibClassification">
    update lib_classification
    set class_name = #{className,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      parent_path = #{parentPath,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time =CURRENT_TIMESTAMP,
      remark = #{remark,jdbcType=VARCHAR},
      brief =  #{brief,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>